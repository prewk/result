# https://docs.github.com/en/actions

name: "test"

on:
  pull_request: null
  push:
    branches:
      - "master"

jobs:
  code-coverage:
    name: "Code Coverage"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "8.1"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.4"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.30.5"
        with:
          coverage: "xdebug"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Set up problem matchers for phpunit/phpunit"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"'

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Collect code coverage with Xdebug and phpunit/phpunit"
        env:
          XDEBUG_MODE: "coverage"
        run: "vendor/bin/phpunit --colors=always --configuration=test/Unit/phpunit.xml.dist --coverage-clover=.build/phpunit/logs/clover.xml"

      - name: "Send code coverage report to Coveralls"
        uses: "coverallsapp/github-action@v2.2.3"
        with:
          file: ".build/phpunit/logs/clover.xml"
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          parallel-finished: true

  coding-standards:
    name: "Coding Standards"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "8.1"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.4"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.30.5"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run ergebnis/composer-normalize"
        run: "composer normalize --ansi --dry-run"

      - name: "Cache cache directory for easy-coding-standard/easy-coding-standard"
        uses: "actions/cache@v4.0.2"
        with:
          path: ".build/ecs"
          key: "php-${{ matrix.php-version }}-ecs-${{ github.ref_name }}"
          restore-keys: |
            php-${{ matrix.php-version }}-ecs-master
            php-${{ matrix.php-version }}-ecs-

      - name: "Run easy-coding-standard/easy-coding-standard"
        run: "vendor/bin/ecs --ansi --config=ecs.php --no-progress-bar --verbose"

  mutation-tests:
    name: "Mutation Tests"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "8.1"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.4"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.30.5"
        with:
          coverage: "xdebug"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run mutation tests with Xdebug and infection/infection"
        env:
          XDEBUG_MODE: "coverage"
        run: "vendor/bin/infection --ansi --configuration=infection.json.dist --logger-github"

  static-code-analysis:
    name: "Static Code Analysis"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "8.1"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.4"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.30.5"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run vimeo/psalm"
        run: "vendor/bin/psalm --config=psalm.xml --output-format=github --shepherd --show-info=false --stats --threads=4"

  tests:
    name: "Tests"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "8.1"
          - "8.2"
          - "8.3"

        dependencies:
          - "lowest"
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.4"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.30.5"
        with:
          coverage: "none"
          extensions: "none, bcmath, ctype, curl, dom, intl, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Set up problem matchers for phpunit/phpunit"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"'

      - name: "Remove platform configuration with composer"
        if: "matrix.dependencies != 'locked'"
        run: "composer config platform.php --ansi --unset"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ramsey/composer-install@3.0.0"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Run unit tests with phpunit/phpunit"
        run: "vendor/bin/phpunit --colors=always --configuration=test/Unit/phpunit.xml.dist"
